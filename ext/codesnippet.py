# -*- coding: utf-8 -*-
from __future__ import with_statement
import sys
import os
import time
import codecs
import re
import doctest
from docutils import nodes, statemachine

from sphinx.builders import Builder
from sphinx.util.console import bold
from sphinx.util.compat import Directive, make_admonition

RSTTEXT="""\
.. _%s:

%s
%s
%s

:download:`Download <%s>`.

.. literalinclude:: %s
"""

SNIPTEXT = "You can find all the code in this chapter "

def condition(node):
    return (isinstance(node, (nodes.literal_block, nodes.comment))
            and node.has_key('testnodetype')) or isinstance(node,
                                                            nodes.doctest_block)
def visit_codesnippet_node(self, node):
    self.visit_admonition(node)

def depart_codesnippet_node(self, node):
    self.depart_admonition(node)

class CodeSnippet(nodes.Admonition, nodes.Element):
    pass

class CodeSnippetDirective(Directive):
    has_content = True

    def run(self):
        env = self.state.document.settings.env
        link = os.path.basename(env.docname)+'_code'
        self.content = statemachine.StringList([ SNIPTEXT+
                                                 ':ref:`here <%s>`'%link])
        targetid = "codesnippet-%d" % env.new_serialno('codesnippet')
        targetnode = nodes.target('', '', ids=[targetid])
        ad = make_admonition(CodeSnippet, self.name, ['CodeSnippet'],
                             self.options,
                             self.content, self.lineno, self.content_offset,
                             self.block_text, self.state, self.state_machine)
        return [targetnode] + ad

class GenmoduleBuilder(Builder):
    name = 'codesnippet'

    def init(self):
        self.total_lines = 0
        self.files = 0
        self.docs = []
        date = time.strftime('%Y-%m-%d')
        header = ('# -*- coding: utf-8 -*-\n'
                  '# Generated by %s sphinx extension on %s\n'%(self.name,
                                                                date))

        if self.config.doctest_global_setup:
            self.header = ''.join((header,
                                   self.config.doctest_global_setup))
        else:
            self.header = header

        if self.config.codesnippet_path == '':
            self.info('Need to set a path for the code links.')
            self.info('Please set the "codesnippet_path" variable in conf.py!')
            sys.exit(1)

        self.linkpath = os.path.normpath(os.path.sep+self.config.codesnippet_path)
        self.cwd = os.getcwd()+os.path.sep

    def shortname(self, name):
        pfx = os.path.commonprefix((self.cwd, name))
        return name[len(pfx):]

    def get_target_uri(self, docname, typ=None):
        return ''

    def get_outdated_docs(self):
        return self.env.found_docs

    def finish(self):
        msg = 'Wrote %d lines in %d files.' % (self.total_lines, self.files)
        pad = len(msg)
        self.info('\n'+'='*pad +'\n'+ bold(msg) + '\n'+'='*pad)
        self.write_toctree()

    def get_relative_name(self, docname):
        return os.path.basename(docname)

    def get_module_name(self, docname, ext, abs=True):
        newname = docname.replace('/','_').replace('\\','_')
        filename = newname + ext
        if abs:
            filename = os.path.join(self.outdir, filename)
        return filename

    def get_code_link(self, docname):
        return os.path.join(self.linkpath, self.get_module_name(docname, '.py',
                                                                abs=False))

    def write(self, build_docnames, updated_docnames, method='update'):
        if build_docnames is None:
            build_docnames = sorted(self.env.all_docs)

        self.info(bold('Creating modules in "%s"'%self.shortname(self.outdir)))
        for docname in build_docnames:
            doctree = self.env.get_doctree(docname)
            self.gen_snippets(docname, doctree)

    def gen_snippets(self, docname, doctree):
        code = []
        for node in doctree.traverse(condition):
            source = node.has_key('test') and node['test'] or node.astext()
            example = doctest.script_from_examples(source)

            if self.config.codesnippet_strip_doctest_directives:
                # remove doctest directives
                lines = (re.split(r'\s*#\s*doctest:', line, 1)[0]
                         for line in example.split('\n'))
                example = '\n'.join(lines)

            code.append(example)

        if len(code) > 0:
            self.info('\nDocument: %s\n----------%s\n' %
                      (docname, '-'*len(docname)))
            self.write_code(docname, code)
            self.write_rst(docname)

    def write_code(self, docname, code):
        text = self.header + '\n'.join(code)
        lines = text.count('\n')
        self.total_lines += lines
        flname = self.get_module_name(docname, '.py')
        with codecs.open(flname, 'w', encoding='utf-8') as fl:
            fl.write(text)
        self.files += 1
        self.info('Wrote %d lines to %s' % (lines, self.shortname(flname)))

    def write_rst(self, docname):
        rstname = self.get_module_name(docname, '.rst')
        label_to_us = self.get_relative_name(docname)+'_code'
        link_to_doc = self.get_relative_name(docname)
        download = self.get_code_link(docname)
        include = self.get_code_link(docname)
        link_to_doc_text = 'Code snippets for page :ref:`%s`' % link_to_doc
        overline = '='*len(link_to_doc_text)
        text = RSTTEXT % (label_to_us,
                          overline,
                          link_to_doc_text,
                          overline,
                          download,
                          include)
        with codecs.open(rstname, 'w', encoding='utf-8') as fl:
            fl.write(text)
        self.info('Wrote link page to %s' % self.shortname(rstname))
        self.docs.append(self.get_module_name(docname, '.rst', abs=False))

    def write_toctree(self):
        name = os.path.join(self.outdir, 'code_snippets.rst')
        text = ['.. _code_snippets:\n',
                '=============',
                'Code Snippets',
                '=============\n',
                '.. toctree::\n']
        text.extend('   '+doc for doc in self.docs)
        with codecs.open(name, 'w', encoding='utf-8') as fl:
            fl.write('\n'.join(text))
        self.info(bold('Created toctree page in %s' % self.shortname(name)))


def setup(app):
    app.add_builder(GenmoduleBuilder)
    app.add_config_value('codesnippet_path', '', 'env')
    app.add_config_value('codesnippet_strip_doctest_directives', True, False)
    app.add_directive('codesnippet', CodeSnippetDirective)
    app.add_node(CodeSnippet,
                 html=(visit_codesnippet_node, depart_codesnippet_node),
                 latex=(visit_codesnippet_node, depart_codesnippet_node),
                 text=(visit_codesnippet_node, depart_codesnippet_node))
