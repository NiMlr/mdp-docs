# -*- coding: utf-8 -*-
from __future__ import with_statement
import sys
import os
import time
import codecs
import re
import doctest
import errno
from docutils import nodes, statemachine
from docutils.parsers.rst import Directive

from sphinx.builders import Builder
from sphinx.util.console import bold

def write_if_changed(filename, text, logger):
    """Write file to disk, only if contents would be different.

    :Return: True if file was actually written
    """
    try:
        with codecs.open(filename, 'r', encoding='utf-8') as file:
            if file.read() == text:
                logger.info('%s is unchanged' % filename)
                return False
    except IOError:
        pass

    dirname = os.path.split(filename)[0]
    try:
        os.makedirs(dirname)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise
    with codecs.open(filename, 'w', encoding='utf-8') as file:
        file.write(text)
    return True

RSTTEXT="""\
.. _%s:

%s
%s
%s

Download :download:`%s <%s>`.
Browse the :ref:`code snippet index <code_snippets>`.

.. literalinclude:: %s
"""

SNIPTEXT = ("You can download all the code on this page from the"
            " :code_snippet:`code snippets directory <%s>`")

def condition(node):
    return (isinstance(node, (nodes.literal_block, nodes.comment))
            and 'testnodetype' in node) or isinstance(node,
                                                            nodes.doctest_block)
def visit_codesnippet_node(self, node):
    self.visit_admonition(node)

def depart_codesnippet_node(self, node):
    self.depart_admonition(node)

class CodeSnippet(nodes.Admonition, nodes.Element):
    pass


# imported from sphinx/util/compat.py
def _make_admonition(node_class, name, title_text, options, content, lineno,
                     content_offset, block_text, state, state_machine):
    text = '\n'.join(content)
    admonition_node = node_class(text)
    textnodes, messages = state.inline_text(title_text, lineno)
    admonition_node += nodes.title(title_text, '', *textnodes)
    admonition_node += messages
    if 'class' in options:
        classes = options['class']
    else:
        classes = ['admonition-' + nodes.make_id(title_text)]
    admonition_node['classes'] += classes
    state.nested_parse(content, content_offset, admonition_node)
    return [admonition_node]

class CodeSnippetDirective(Directive):
    has_content = True

    def run(self):
        env = self.state.document.settings.env
        link = env.docname.replace('\\','_') + '.html'
        self.content = statemachine.StringList([ SNIPTEXT % link ])
        targetid = "codesnippet-%d" % env.new_serialno('codesnippet')
        targetnode = nodes.target('', '', ids=[targetid])
        ad = _make_admonition(CodeSnippet, self.name, 'CodeSnippet',
                              self.options,
                              self.content, self.lineno, self.content_offset,
                              self.block_text, self.state, self.state_machine)
        return [targetnode] + ad


class CodeSnippetBuilder(Builder):
    name = 'codesnippet'

    def init(self):
        self.total_lines = 0
        self.files = 0
        self.docs = []
        date = time.strftime('%Y-%m-%d')
        header = ('# -*- coding: utf-8 -*-\n'
                  '# Generated by %s sphinx extension on %s\n'%(self.name,
                                                                date))

        if self.config.doctest_global_setup:
            self.header = ''.join((header,
                                   self.config.doctest_global_setup))
        else:
            self.header = header

        if self.config.codesnippet_path == '':
            self.info('Need to set a path for the code links.')
            self.info('Please set the "codesnippet_path" variable in conf.py!')
            sys.exit(1)

        self.linkpath = os.path.normpath(os.path.sep+self.config.codesnippet_path)
        self.cwd = os.getcwd()+os.path.sep

    def shortname(self, name):
        pfx = os.path.commonprefix((self.cwd, name))
        return name[len(pfx):]

    def get_target_uri(self, docname, typ=None):
        return ''

    def get_outdated_docs(self):
        return self.env.found_docs

    def finish(self):
        msg = 'Wrote %d lines in %d files.' % (self.total_lines, self.files)
        pad = len(msg)
        self.info('\n'+'='*pad +'\n'+ bold(msg) + '\n'+'='*pad)
        self.write_toctree()

    def get_relative_name(self, docname):
        return os.path.basename(docname)

    def get_module_name(self, docname, ext, abs=True):
        """Return the normalized name of the file with code
        """
        newname = docname.replace('\\', '_')
        filename = newname + ext
        if abs:
            filename = os.path.join(self.outdir, filename)
        return filename

    def get_code_link(self, docname):
        return os.path.join(self.linkpath, self.get_module_name(docname, '.py',
                                                                abs=False))

    def write(self, build_docnames, updated_docnames, method='update'):
        if build_docnames is None:
            build_docnames = sorted(self.env.all_docs)

        self.info(bold('Creating modules in "%s"'%self.shortname(self.outdir)))
        for docname in build_docnames:
            doctree = self.env.get_doctree(docname)
            self.gen_snippets(docname, doctree)

    def gen_snippets(self, docname, doctree):
        code = []
        for node in doctree.traverse(condition):
            source = 'test' in node and node['test'] or node.astext()
            try:
                example = doctest.script_from_examples(source)
            except Exception as exc:
                # catch doctest errors
                self.info('\nDocument: %s\n----------%s\n' %
                          (docname, '-'*len(docname)))
                raise Exception(exc)
            
            if self.config.codesnippet_strip_doctest_directives:
                # remove doctest directives
                lines = (re.split(r'\s*#\s*doctest:', line, 1)[0]
                         for line in example.split('\n'))
                example = '\n'.join(lines)

            code.append(example)

        if len(code) > 0:
            self.info('\nDocument: %s\n----------%s\n' %
                      (docname, '-'*len(docname)))
            self.write_code(docname, code)
            self.write_rst(docname)

    def write_code(self, docname, code):
        text = self.header + '\n'.join(code)
        flname = self.get_module_name(docname, '.py')
        if write_if_changed(flname, text, self):
            self.files += 1
            lines = text.count('\n')
            self.total_lines += lines
            self.info('Wrote %d lines to %s' % (lines, self.shortname(flname)))

    def write_rst(self, docname):
        rstname = self.get_module_name(docname, '.rst')
        label_to_us = self.get_relative_name(docname)+'_code'
        link_to_doc = self.get_relative_name(docname)
        download = self.get_code_link(docname)
        include = self.get_code_link(docname)
        link_to_doc_text = 'Code snippets for page :ref:`%s`' % link_to_doc
        overline = '='*len(link_to_doc_text)
        text = RSTTEXT % (label_to_us,
                          overline,
                          link_to_doc_text,
                          overline,
                          os.path.basename(download), download,
                          include)
        if write_if_changed(rstname, text, self):
            self.info('Wrote link page to %s' % self.shortname(rstname))
        self.docs.append(self.get_module_name(docname, '.rst', abs=False))

    def write_toctree(self):
        name = os.path.join(self.outdir, 'code_snippets.rst')
        text = ['.. _code_snippets:\n',
                '=============',
                'Code Snippets',
                '=============\n',
                '.. toctree::\n']
        text.extend('   '+doc for doc in self.docs)
        if write_if_changed(name, '\n'.join(text), self):
            self.info(bold('Created toctree page in %s' % self.shortname(name)))


def setup(app):
    app.add_builder(CodeSnippetBuilder)
    app.add_config_value('codesnippet_path', '', 'env')
    app.add_config_value('codesnippet_strip_doctest_directives', True, False)
    app.add_directive('codesnippet', CodeSnippetDirective)
    app.add_node(CodeSnippet,
                 html=(visit_codesnippet_node, depart_codesnippet_node),
                 latex=(visit_codesnippet_node, depart_codesnippet_node),
                 text=(visit_codesnippet_node, depart_codesnippet_node))
