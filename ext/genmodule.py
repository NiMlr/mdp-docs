# -*- coding: utf-8 -*-
import time
import os
import codecs
import doctest
from docutils import nodes

from sphinx.builders import Builder
from sphinx.util.console import bold

def condition(node):
    return (isinstance(node, (nodes.literal_block, nodes.comment))
            and node.has_key('testnodetype')) or isinstance(node,
                                                            nodes.doctest_block)

class GenmoduleBuilder(Builder):
    name = 'genmodule'

    def init(self):
        self.total_lines = 0
        self.files = 0
        date = time.strftime('%Y-%m-%d %H:%M:%S')
        header = ('# -*- coding: utf-8 -*-\n'
                  '# Generated by %s sphinx extension on %s\n'%(self.name,
                                                                date))

        if self.config.doctest_global_setup:
            self.header = ''.join((header,
                                   self.config.doctest_global_setup))
        else:
            self.header = header

        self.cwd = os.getcwd()+os.path.sep

    def shortname(self, name):
        pfx = os.path.commonprefix((self.cwd, name))
        return name[len(pfx):]

    def get_target_uri(self, docname, typ=None):
        return ''

    def get_outdated_docs(self):
        return self.env.found_docs

    def finish(self):
        msg = 'Wrote %d lines in %d files.'%(self.total_lines, self.files)
        pad = len(msg)
        self.info('\n'+'='*pad +'\n'+ bold(msg) + '\n'+'='*pad)

    def get_module_name(self, docname):
        newname = docname.replace('/','_')
        newname = newname.replace('\\','_')
        filename = os.path.join(self.outdir, newname+'.py')
        return filename

    def write(self, build_docnames, updated_docnames, method='update'):
        if build_docnames is None:
            build_docnames = sorted(self.env.all_docs)

        self.info(bold('Creating modules in "%s"'%self.shortname(self.outdir)))
        for docname in build_docnames:
            doctree = self.env.get_doctree(docname)
            self.gen_module(docname, doctree)

    def gen_module(self, docname, doctree):
        code = []
        for node in doctree.traverse(condition):
            source = node.has_key('test') and node['test'] or node.astext()
            example = doctest.script_from_examples(source)
            code.append(example)

        if len(code) > 0:
            self.info('\nDocument: %s\n----------%s\n' %
                      (docname, '-'*len(docname)))
            text = self.header + ''.join(code)
            lines = text.count('\n')
            self.total_lines += lines
            flname = self.get_module_name(docname)
            fl = codecs.open(flname, 'w', encoding='utf-8')
            fl.write(text)
            fl.close()
            self.files += 1
            self.info('Wrote %d lines to %s'%(lines, self.shortname(flname)))

def setup(app):
    app.add_builder(GenmoduleBuilder)
